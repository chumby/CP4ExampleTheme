////  TraceTheme////  Copyright (c) 2017 Blue Octy LLC//// Permission is hereby granted, free of charge, to any person obtaining a copy// of this software and associated documentation files (the "Software"), to deal// in the Software without restriction, including without limitation the rights// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell// copies of the Software, and to permit persons to whom the Software is// furnished to do so, subject to the following conditions:// // The above copyright notice and this permission notice shall be included in all// copies or substantial portions of the Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE// SOFTWARE.//// this is a trival theme whose sole job is to accept and log CP events//import com.blueocty.themes.ITheme;import com.blueocty.themes.IThemeCallbacks;import com.blueocty.themes.Theme;import com.example.tracetheme.LabeledButton;class com.example.tracetheme.TraceTheme extends Theme {	var traceField:TextField;		var sendClocksButton:LabeledButton;	var nextWidgetButton:LabeledButton;	var prevWidgetButton:LabeledButton;	var sendPhotosButton:LabeledButton;	var sendMusicButton:LabeledButton;	var alertOKButton:LabeledButton;	var sendWeatherButton:LabeledButton;	var a:Array;		function TraceTheme() {		trace1('TraceTheme()');		//var cb:IThemeCallbacks = this.callbacks;				this.sendClocksButton.onButtonRelease = function() { this._parent.callbacks.sendClocks(); }		this.prevWidgetButton.onButtonRelease = function() { this._parent.callbacks.previousWidget(); }		this.nextWidgetButton.onButtonRelease = function() { this._parent.callbacks.nextWidget(); }		this.sendPhotosButton.onButtonRelease = function() { this._parent.callbacks.sendPhotos(); }		this.sendMusicButton.onButtonRelease = function() { this._parent.callbacks.sendMusicServices(); }		this.sendWeatherButton.onButtonRelease = function() { this._parent.callbacks.sendWeather(); }		this.alertOKButton.onButtonRelease = function() { this._parent.callbacks.alertOK('This is an alert'); }	}		static var TENS:Array = [1,10,100,1000];	function padStr(n:Number,digits:Number):String {		var result:String = '';		while (--digits>=0) {			var d:Number = int(n/TENS[digits]) % 10;			result += d.toString();		}		return result;	}	function timeStamp():String {		var d:Date = new Date();		return padStr(d.getHours(),2)+':'+padStr(d.getMinutes(),2)+':'+padStr(d.getMinutes(),2)+'.'+padStr(d.getMilliseconds(),4);	}	function trace1(s:String):Void {		this.traceField.text += timeStamp()+' | '+s+'\n';		this.traceField.scroll = this.traceField.maxscroll;		trace(s); // also output to regular trace	}	function onHello(greeting:String):Void {		super.onHello(greeting);		trace1('TraceTheme.onHello(): '+greeting);	}		function onGoodbye():Void {		trace1('TraceTheme.onGoodbye()');		super.onGoodbye();		delete _global.com.example.tracetheme;		delete _global.com.blueocty.themes.Theme;	}	function onCallbacks(callbacks:IThemeCallbacks):Void {		trace1('TraceTheme.onCallbacks(): '+callbacks.toString());		super.onCallbacks(callbacks);		this.callbacks.hello('Hello from theme');	}	function onHome():Void {		super.onHome();		trace1("TraceTheme.onHome()");	}	function isHome():Boolean {		trace1("TraceTheme.isHome()");		return true;	}	function onPopupBar(showing:Boolean):Void {		super.onPopupBar();		trace1("TraceTheme.onPopupBar(): "+showing);	}		function onControls(show:Boolean):Void {		super.onControls(show);		trace1("TraceTheme.onControls(): "+show);	}	function onNavigation(showing:Boolean):Void {		super.onNavigation(showing);		trace1("TraceTheme.onNavigation(): "+showing);	}	function onClocks(clocks:Object):Void {		super.onClocks(clocks);		trace1('TraceTheme.onClocks(): '+clocks.toString());		var locations = clocks.locations;		for (var i:Number=0;i<locations.length;i++) {			var location = locations[i];			if (location.enabled) {				var d = this.callbacks.dateForLocation(location);				trace1('TraceTheme.onClocks(): clock '+i+': '+d.toString());			}		}	}	function onClockFormat(format:String):Void {		super.onClockFormat(format);		trace1('TraceTheme.onClockFormat(): '+format);	}	function onAlarms(alarms:Object):Void {		super.onAlarms(alarms);		trace1('TraceTheme.onAlarms(): '+alarms.toString());	}	function onWeather(weather:Object):Void {		super.onWeather(weather);		trace1('TraceTheme.onWeather(): '+weather.toString());		for (var i in weather.locations) {			trace1(i+': '+weather.locations[i].data.toString());		}	}		function onWeatherFormat(format:String):Void {		super.onWeatherFormat(format);		trace1('TraceTheme.onWeatherFormat(): '+format);	}	function onChannel(channel:Object):Void {		super.onChannel(channel);		trace1('TraceTheme.onChannel(): '+channel.toString());	}	function onWidget(widget:Object):Void {		super.onWidget(widget);		trace1('TraceTheme.onWidget(): '+widget.toString());		this.callbacks.setWidgetPosition(700,10,64,48);			}	function onPhotos(photos:Object):Void {		super.onPhotos(photos);		trace1('TraceTheme.onPhotos(): '+photos.toString());		this.callbacks.setWidgetPosition			}	function onMusicServices(music:Object):Void {		super.onMusicServices(music);		this['a'] = music.musicServices;		for (var index:String in a) {			var item = a[index];			trace1('TraceTheme.onMusicServices(): '+index+': '+item.name+" "+item.description);		}	}	function onMusicStatus(status:String,source:Object):Void {		super.onMusicStatus(status,source);		trace1("TraceTheme.onMusicStatus(): "+status.toString()+' '+source.toString());	}		function onVolume(volume:Number):Void {		super.onVolume(volume);		trace1('TraceTheme.onVolume(): '+volume);	}	function onFlip(flipped:Boolean):Void {		super.onFlip(flipped);		trace1('TraceTheme.onFlip(): '+flipped);	}	function onKeyboard(ok:Boolean, txt:String):Void {		super.onKeyboard(ok,txt);		trace1('TraceTheme.onKeyboard(): '+ok+' text:"'+txt+'"');	}		// usb	function onUSBMount(mountPoint:String):Void {		super.onUSBMount(mountPoint);		trace1('TraceTheme.onUSBMount(): '+mountPoint);	}		function onUSBUnmount(mountPoint:String):Void {		super.onUSBUnmount(mountPoint);		trace1("TraceTheme.onUSBUnmount(): "+mountPoint);	}}